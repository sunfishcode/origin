[package]
name = "origin"
version = "0.13.14"
authors = [
    "Dan Gohman <dev@sunfishcode.online>",
]
description = "Program startup and thread support written in Rust"
documentation = "https://docs.rs/origin"
license = "Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT"
repository = "https://github.com/sunfishcode/origin"
edition = "2021"
keywords = ["linux"]
categories = ["no-std"]
include = ["src", "Cargo.toml", "COPYRIGHT", "LICENSE*", "/*.md"]

[dependencies]
linux-raw-sys = { version = "0.4.9", default-features = false, features = ["general", "no_std", "elf"] }
rustix = { version = "0.38.17", default-features = false }
bitflags = { version = "2.4.0", default-features = false }
memoffset = { version = "0.9.0", optional = true }
log = { version = "0.4.14", default-features = false, optional = true }
rustix-futex-sync = "0.1.0"

# Optional logging backends for use with "origin-program". You can use any
# external logger, but using these features allows origin to initialize the
# logger before `origin_main`, so that you can see the log messages emitted
# before `origin_main` is called.

# Enable `env_logger`; eg. recognizing `RUST_LOG=trace`. This requires `std`.
env_logger = { version = "0.10.0", optional = true, default-features = false }

# Enable `atomic-dbg`'s simple logger. This doesn't require `std`.
atomic-dbg = { version = "0.1", default-features = false, optional = true }

# Enable this when disabling origin's implementations.
libc = { version = "0.2.138", default-features = false, optional = true }
errno = { version = "0.3.3", default-features = false, optional = true }

# Special dependencies used in rustc-dep-of-std mode.
core = { version = "1.0.0", optional = true, package = "rustc-std-workspace-core" }
alloc = { version = "1.0.0", optional = true, package = "rustc-std-workspace-alloc" }
compiler_builtins = { version = "0.1.101", optional = true }

[target.'cfg(not(target_arch = "arm"))'.dependencies.unwinding]
version = "0.2.0"
default-features = false
features = [ "unwinder" ]

[dev-dependencies]
assert_cmd = "2.0.12"

[features]
default = ["std", "log", "libc", "errno", "thread", "init-fini-arrays"]
std = ["rustix/std", "bitflags/std"]
set_thread_id = []
rustc-dep-of-std = [
    "dep:core",
    "dep:alloc",
    "linux-raw-sys/rustc-dep-of-std",
    "bitflags/rustc-dep-of-std",
    "rustix/rustc-dep-of-std",
    "unwinding/rustc-dep-of-std",
    "libc?/rustc-dep-of-std",
    "rustix-futex-sync/rustc-dep-of-std",
    "dep:compiler_builtins",
]

# Use origin's implementation of program startup and shutdown.
origin-program = []

# Use origin's implementation of thread startup and shutdown.
origin-thread = ["memoffset", "rustix/runtime", "origin-program", "thread"]

# Use origin's implementation of signal handle registrtion.
origin-signal = ["rustix/runtime", "signal"]

# Use origin's `_start` definition.
origin-start = ["rustix/use-explicitly-provided-auxv", "rustix/runtime", "origin-program"]

# Don't use origin's `_start` definition, but export a `start` function which
# is meant to be run very early in program startup and passed a pointer to
# the initial stack. Don't enable this when enabling "origin-start".
external-start = ["rustix/use-explicitly-provided-auxv", "rustix/runtime", "origin-program"]

# The loggers depend on a `.init_array` entry to initialize themselves, and
# `env_logger` needs it so that `c-scape` can initialize environment variables
# and make `RUST_LOG` available.
atomic-dbg-logger = ["atomic-dbg/log"]
env_logger = ["dep:env_logger", "init-fini-arrays"]

# Disable logging.
max_level_off = ["log/max_level_off"]

# Enable features which depend on the Rust global allocator, such as functions
# that return owned strings or `Vec`s.
alloc = ["rustix/alloc"]

# Enable support for threads.
#
# Origin's threads support currently depends on dynamic allocation, so it
# pulls in the "alloc" feature.
thread = ["alloc", "rustix/thread", "rustix/mm", "param", "rustix/process", "rustix/runtime"]

# Enable support for signal handlers.
signal = ["rustix/runtime"]

# Enable support for `rustix::param`.
param = ["rustix/param"]

# Enable support for ELF `.init_array` and `.fini_array`.
init-fini-arrays = []

# Enable highly experimental support for performing startup-time relocations,
# needed to support statically-linked PIE executables.
experimental-relocate = ["rustix/mm", "rustix/runtime"]

[package.metadata.docs.rs]
features = ["origin-thread", "origin-signal", "origin-start"]
rustdoc-args = ["--cfg", "doc_cfg"]
