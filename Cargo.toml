[package]
name = "origin"
version = "0.11.6"
authors = [
    "Dan Gohman <dev@sunfishcode.online>",
]
description = "Program startup and thread support written in Rust"
documentation = "https://docs.rs/origin"
license = "Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT"
repository = "https://github.com/sunfishcode/origin"
edition = "2021"
keywords = ["linux"]
categories = ["no-std"]
include = ["src", "Cargo.toml", "COPYRIGHT", "LICENSE*", "/*.md"]

[dependencies]
linux-raw-sys = { version = "0.4.3", default-features = false, features = ["general", "no_std"] }
rustix = { version = "0.38.9", default-features = false }
bitflags = "2.4.0"
memoffset = { version = "0.9.0", optional = true }
log = { version = "0.4.14", default-features = false, optional = true }
rustix-futex-sync = "0.1.0"

# Optional logging backend. You can use any external logger, but using this
# feature allows origin to initialize the logger before main, so that you can
# see the log messages emitted before main is called.
env_logger = { version = "0.10.0", optional = true }

# Enable this when disabling origin's implementations.
libc = { version = "0.2.138", default-features = false, optional = true }
# FIXME: this needs https://github.com/lambda-fairy/rust-errno/pull/77
#errno = { version = "0.3.2", default-features = false, optional = true }

# Special dependencies used in rustc-dep-of-std mode.
core = { version = "1.0.0", optional = true, package = "rustc-std-workspace-core" }
alloc = { version = "1.0.0", optional = true, package = "rustc-std-workspace-alloc" }

[target.'cfg(not(target_arch = "arm"))'.dependencies.unwinding]
version = "0.2.0"
default-features = false
features = [ "unwinder" ]

[dev-dependencies]
similar-asserts = "1.1.0"

[features]
default = ["std", "log", "libc", "thread"]
std = ["rustix/std"]
set_thread_id = []
rustc-dep-of-std = [
    "dep:core",
    "dep:alloc",
    "linux-raw-sys/rustc-dep-of-std",
    "bitflags/rustc-dep-of-std",
    "libc/rustc-dep-of-std",
]

# Use origin's implementation of program startup and shutdown.
origin-program = []

# Use origin's implementation of thread startup and shutdown.
origin-thread = ["memoffset", "rustix/runtime", "origin-program", "thread"]

# Use origin's implementation of signal handle registrtion.
origin-signal = ["rustix/runtime", "signal"]

# Use origin's `_start` definition.
origin-start = ["rustix/use-explicitly-provided-auxv", "rustix/param", "rustix/runtime"]

# Don't use origin's `_start` definition, but export a `start` function which
# is meant to be run very early in program startup and passed a pointer to
# the initial stack. Don't enable this when enabling "origin-start".
external-start = ["rustix/use-explicitly-provided-auxv", "rustix/param", "rustix/runtime"]

# Disable logging.
max_level_off = ["log/max_level_off"]

# Enable features which depend on the Rust global allocator, such as functions
# that return owned strings or `Vec`s.
alloc = ["rustix/alloc"]

# Enable support for threads.
thread = ["alloc", "rustix/thread", "rustix/mm", "rustix/param", "rustix/process", "rustix/runtime"]

# Enable support for signal handlers.
signal = ["rustix/runtime"]

[package.metadata.docs.rs]
features = ["origin-program", "origin-thread", "origin-signal", "origin-start"]
rustdoc-args = ["--cfg", "doc_cfg"]

[patch.crates-io]
rustix = { git = "https://github.com/bytecodealliance/rustix", rev = "397155aa086fcdddb85319a4ae73652a27a0ab44" }
